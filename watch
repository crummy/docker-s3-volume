#!/bin/bash

[[ "$TRACE" ]] && set -x

function usage {
cat <<-EOF
  Usage: $PROGNAME [OPTIONS] <local-path> <remote-path>
  Sync s3 directory locally and backup changed files on exit

    --force-restore      restore even if local directory is not empty

     eg: $PROGNAME /data s3://bucket/dir
EOF
}

function error_exit {
  echo "${1:-"Unknown Error"}" 1>&2
  exit 1
}

PARSED_OPTIONS=$(getopt -n "$0" -o f --long "force-restore" -- "$@")
if [ $? -ne 0 ]; then
  exit 1
fi
eval set -- "$PARSED_OPTIONS"

while true; do
  case "$1" in
    -f|--force-restore)
      FORCE_RESTORE="true"
      shift;;

    --)
      shift
      break;;
  esac
done

PROGNAME=$0
LOCAL=$1
REMOTE=$(echo $2 | sed -e "s#.*/##")
BUCKET=$(echo $2 | sed -e "s#s3://\(.*\)/.*#\1#")
# $ENDPOINT_URL typically looks like https://cos.na-ashburn.myqcloud.com
REGION=$(echo $ENDPOINT_URL | sed -e "s#https://cos.##" | sed -e "s#.myqcloud.com##")

echo "remote: $REMOTE"
echo "bucket: $BUCKET"
echo "region: $REGION"

HEALTHCHECK_FILE=/var/healthy.txt

AWS='coscmd'

function restore {
  if [ "$(ls -A $LOCAL)" ]; then
    if [[ ${FORCE_RESTORE:false} == 'true' ]]; then
      error_exit "local directory is not empty"
    fi
  fi

  echo "restoring $REMOTE => $LOCAL"
  if ! $AWS download -r -s -y --delete "$REMOTE" "$LOCAL"; then
    error_exit "restore failed"
  fi
  touch $HEALTHCHECK_FILE
}

coscmd config -a $AWS_ACCESS_KEY_ID -s $AWS_SECRET_ACCESS_KEY -b $BUCKET -r $REGION

function backup {
  echo "backup $LOCAL => $REMOTE"
  if ! $AWS upload -r -s -y --delete "$LOCAL" "$REMOTE" ; then
    echo "backup failed" 1>&2
    rm $HEALTHCHECK_FILE
    return 1
  fi
  touch $HEALTHCHECK_FILE
}

function final_backup {
  echo "backup $LOCAL => $REMOTE"
  while ! $AWS upload -r -s -y --delete "$LOCAL" "$REMOTE" ; do
    echo "backup failed, will retry" 1>&2
    sleep 1
  done
  exit 0
}

function idle {
  echo "ready"
  while true; do
    sleep ${BACKUP_INTERVAL:-42} &
    wait $!
    [ -n "$BACKUP_INTERVAL" ] && backup
  done
}

restore

trap final_backup SIGHUP SIGINT SIGTERM
trap "backup; idle" USR1

idle
